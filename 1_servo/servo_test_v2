sudo vim servo-script.py

import webiopi
import time

GPIO = webiopi.GPIO
SERVO_X = 22
SERVO_Y = 24
SERVO_Z = 25
DEFAULT_X = -10
DEFAULT_Y = -49
DEFAULT_Z = -17
CURRENT_X = DEFAULT_X
CURRENT_Y = DEFAULT_Y
CURRENT_Z = 0

time_stamp = time.time()

def setup():
    GPIO.setFunction(SERVO_X, GPIO.PWM)
    GPIO.setFunction(SERVO_Y, GPIO.PWM)
    GPIO.setFunction(SERVO_Z, GPIO.PWM)

GPIO.pulseAngle(SERVO_X, DEFAULT_X)
GPIO.pulseAngle(SERVO_Y, DEFAULT_Y)
GPIO.pulseAngle(SERVO_Z, DEFAULT_Z)
webiopi.sleep(0.5)
GPIO.pulseRatio(SERVO_X, 0)
GPIO.pulseRatio(SERVO_Y, 0)
GPIO.pulseRatio(SERVO_Z, 0)

def loop():
   global time_stamp
   if (time_stamp <= time.time() - 20):
       defaultPosition()

   webiopi.sleep(0.5)

@webiopi.macro
def defaultPosition():
    global time_stamp
    if time_stamp <= time.time() - 0.2 and (CURRENT_X != DEFAULT_X or CURRENT_Y != DEFAULT_Y or CURRENT_Z != 0):
        time_stamp = time.time()
        global CURRENT_X
        global CURRENT_Y
        global CURRENT_Z
        CURRENT_X = DEFAULT_X
        CURRENT_Y = DEFAULT_Y
        GPIO.pulseRatio(SERVO_X, 1)
        GPIO.pulseAngle(SERVO_X, DEFAULT_X)
        webiopi.sleep(0.5)
        GPIO.pulseRatio(SERVO_X, 0)
        GPIO.pulseRatio(SERVO_Y, 1)
        GPIO.pulseAngle(SERVO_Y, DEFAULT_Y)
        webiopi.sleep(0.5)
        GPIO.pulseRatio(SERVO_Y, 0)
        GPIO.pulseRatio(SERVO_Z, 1)
        GPIO.pulseAngle(SERVO_Z, DEFAULT_Z-10.7)
        webiopi.sleep(CURRENT_Z*1.05)
        GPIO.pulseRatio(SERVO_Z, 0)
        CURRENT_Z = 0
        time_stamp = time.time()

@webiopi.macro
def forward():
    global CURRENT_Z, time_stamp
    if CURRENT_Z < 10 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_Z, 1)
        time_stamp = time.time()
        CURRENT_Z = CURRENT_Z + 1
        GPIO.pulseAngle(SERVO_Z, DEFAULT_Z+15)
        webiopi.sleep(1)
        GPIO.pulseAngle(SERVO_Z, DEFAULT_Z)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_Z, 0)

@webiopi.macro
def backward():
    global CURRENT_Z, time_stamp
    if CURRENT_Z > 0 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_Z, 1)
        time_stamp = time.time()
        CURRENT_Z = CURRENT_Z - 1
        GPIO.pulseAngle(SERVO_Z, DEFAULT_Z-10.7)
        webiopi.sleep(1*1.05)
        GPIO.pulseAngle(SERVO_Z, DEFAULT_Z)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_Z, 0)

@webiopi.macro
def down():
    global CURRENT_Y, time_stamp
    if CURRENT_Y < DEFAULT_Y + 5*10 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_Y, 1)
        time_stamp = time.time()
        CURRENT_Y = CURRENT_Y + 5
        GPIO.pulseAngle(SERVO_Y, CURRENT_Y)
        webiopi.sleep(0.5)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_Y, 0)

@webiopi.macro
def up():
    global CURRENT_Y, time_stamp
    if CURRENT_Y > DEFAULT_Y - 5*10 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_Y, 1)
        time_stamp = time.time()
        CURRENT_Y = CURRENT_Y - 5
        GPIO.pulseAngle(SERVO_Y, CURRENT_Y)
        webiopi.sleep(0.5)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_Y, 0)

@webiopi.macro
def left():
    global CURRENT_X, time_stamp
    if CURRENT_X < DEFAULT_X + 5*10 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_X, 1)
        time_stamp = time.time()
        CURRENT_X = CURRENT_X + 5
        GPIO.pulseAngle(SERVO_X, CURRENT_X)
        webiopi.sleep(0.5)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_X, 0)

@webiopi.macro
def right():
    global CURRENT_X, time_stamp
    if CURRENT_X > DEFAULT_X - 5*10 and time_stamp <= time.time() - 0.2:
        GPIO.pulseRatio(SERVO_X, 1)
        time_stamp = time.time()
        CURRENT_X = CURRENT_X - 5
        GPIO.pulseAngle(SERVO_X, CURRENT_X)
        webiopi.sleep(0.5)
        time_stamp = time.time()
        GPIO.pulseRatio(SERVO_X, 0)

def destroy():
    GPIO.setup(SERVO_X, GPIO.IN)
    GPIO.setup(SERVO_Y, GPIO.IN)
    GPIO.setup(SERVO_Z, GPIO.IN)